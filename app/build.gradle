plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    id("jacoco")
}

android {
    namespace 'com.orbitals.colorfilter'
    compileSdk 35

    defaultConfig {
        applicationId "com.orbitals.colorfilter"
        minSdk 30
        targetSdk 35
        versionCode 1
        versionName getVersionFromGit()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments logLevel: 'debug'
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-opt-in=kotlin.ExperimentalUnsignedTypes"
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packagingOptions {
        resources {
            excludes.add('/META-INF/{AL2.0,LGPL2.1}')
        }
    }
    lint {
        checkDependencies true
        lintConfig file("lint.xml")
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation libs.androidx.activity.compose
    implementation libs.androidx.appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.exifinterface
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.material3
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.opencv
    implementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.core
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.espresso.intents
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.rules
    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.androidx.ui.test.junit4
    androidTestImplementation libs.androidx.uiautomator
    androidTestImplementation libs.mockito.android
    androidTestImplementation platform(libs.androidx.compose.bom)
    debugImplementation libs.androidx.ui.test.manifest
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.leakcanary.android
    testImplementation libs.junit
    testImplementation libs.mockito.core
}

jacoco {
    toolVersion = "0.8.11"
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

def coverageSourceDirs = [
        'src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/report.xml"))
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/html"))
    }

    sourceDirectories.setFrom(files(coverageSourceDirs))
    classDirectories.setFrom(fileTree(
            dir: layout.buildDirectory.dir("intermediates/classes/debug").get().asFile,
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    ))

    executionData.setFrom(fileTree(
            dir: layout.buildDirectory.get().asFile,
            includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code-coverage/connected/*coverage.ec'
            ]
    ))
}

def getVersionFromGit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--long', '--match', 'v[0-9]*.[0-9]*.[0-9]*'
        standardOutput = stdout
    }
    def describe = stdout.toString().trim()

    // Parse the git describe output (format: v1.2.3-5-g3c4d5e6)
    def matcher = describe =~ /v(\d+)\.(\d+)\.(\d+)(?:-(\d+)-g([a-f0-9]+))?/
    if (matcher.matches()) {
        def major = matcher.group(1)
        def minor = matcher.group(2)
        def patch = matcher.group(3)
        def commitCount = matcher.group(4)

        if (commitCount && commitCount != "0") {
            // We have commits after the tag, use dev format
            return "${major}.${minor}.${patch}-dev${commitCount}"
        } else {
            // Exact tag match
            return "${major}.${minor}.${patch}"
        }
    } else {
        // Fallback if no tag found
        return "0.1.0-dev"
    }
}
